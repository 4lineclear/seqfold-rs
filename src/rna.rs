//! RNA enthalpy and entropy change parameters.

use std::sync::LazyLock;

use crate::{BpEnergy, Comp, Energies, LoopEnergy, MultiBranch};

// TODO: consider bpenergy computation in a LazyLock

pub const fn multibranch() -> MultiBranch {
    (2.5, 0.1, 0.4, 2.0)
}

pub fn complement() -> Comp {
    pub static RAW_COMPLEMENT: [(u8, u8); 5] = [
        (b'A', b'U'),
        (b'U', b'A'),
        (b'G', b'C'),
        (b'C', b'G'),
        (b'N', b'N'),
    ];

    Comp::from_iter(RAW_COMPLEMENT)
}

pub fn nn() -> BpEnergy {
    pub static RAW_NN: [(&[u8], (f64, f64)); 16] = [
        (b"AA/UU", (-6.8, -19.0)),
        (b"AC/UG", (-11.4, -29.7)),
        (b"AG/UC", (-10.5, -27.1)),
        (b"AU/UA", (-9.4, -26.8)),
        (b"CA/GU", (-10.4, -26.8)),
        (b"CC/GG", (-13.4, -32.6)),
        (b"CG/GC", (-10.6, -26.4)),
        (b"CU/GA", (-10.5, -27.1)),
        (b"GA/CU", (-12.4, -32.2)),
        (b"GC/CG", (-14.9, -37.1)),
        (b"GG/CC", (-13.4, -32.6)),
        (b"GU/CA", (-11.4, -29.7)),
        (b"UA/AU", (-7.7, -20.6)),
        (b"UC/AG", (-12.4, -32.2)),
        (b"UG/AC", (-10.4, -26.8)),
        (b"UU/AA", (-6.8, -19.0)),
    ];

    let mut nn = BpEnergy::default();
    for (s, v) in RAW_NN {
        nn.insert(s.to_owned(), v);
        nn.insert(s.iter().copied().rev().collect(), v);
    }
    nn
}

pub fn internal_mm() -> BpEnergy {
    pub static RAW_INTERNAL_MM: [(&[u8], (f64, f64)); 240] = [
        (b"AA/AA", (0.0, 0.0)),
        (b"AA/AC", (0.0, 0.0)),
        (b"AA/AG", (0.0, 0.0)),
        (b"AA/AU", (0.0, 0.0)),
        (b"AA/CA", (0.0, 0.0)),
        (b"AA/CC", (0.0, 0.0)),
        (b"AA/CG", (0.0, 0.0)),
        (b"AA/CU", (0.0, 0.0)),
        (b"AA/GA", (0.0, 0.0)),
        (b"AA/GC", (0.0, 0.0)),
        (b"AA/GG", (0.0, 0.0)),
        (b"AA/GU", (0.0, 0.0)),
        (b"AA/UA", (0.0, 0.0)),
        (b"AA/UC", (0.0, 0.0)),
        (b"AA/UG", (0.0, 0.0)),
        (b"AC/AA", (0.0, 0.0)),
        (b"AC/AC", (0.0, 0.0)),
        (b"AC/AG", (0.0, 0.0)),
        (b"AC/AU", (0.0, 0.0)),
        (b"AC/CA", (0.0, 0.0)),
        (b"AC/CC", (0.0, 0.0)),
        (b"AC/CG", (0.0, 0.0)),
        (b"AC/CU", (0.0, 0.0)),
        (b"AC/GA", (0.0, 0.0)),
        (b"AC/GC", (0.0, 0.0)),
        (b"AC/GG", (0.0, 0.0)),
        (b"AC/GU", (0.0, 0.0)),
        (b"AC/UA", (0.0, 0.0)),
        (b"AC/UC", (0.0, 0.0)),
        (b"AC/UU", (0.0, 0.0)),
        (b"AG/AA", (0.0, 0.0)),
        (b"AG/AC", (0.0, 0.0)),
        (b"AG/AG", (0.0, 0.0)),
        (b"AG/AU", (0.0, 0.0)),
        (b"AG/CA", (0.0, 0.0)),
        (b"AG/CC", (0.0, 0.0)),
        (b"AG/CG", (0.0, 0.0)),
        (b"AG/CU", (0.0, 0.0)),
        (b"AG/GA", (0.0, 0.0)),
        (b"AG/GC", (0.0, 0.0)),
        (b"AG/GG", (0.0, 0.0)),
        (b"AG/GU", (0.0, 0.0)),
        (b"AG/UA", (0.0, 0.0)),
        (b"AG/UG", (0.0, 0.0)),
        (b"AG/UU", (-3.2, -8.4)),
        (b"AU/AA", (0.0, 0.0)),
        (b"AU/AC", (0.0, 0.0)),
        (b"AU/AG", (0.0, 0.0)),
        (b"AU/AU", (0.0, 0.0)),
        (b"AU/CA", (0.0, 0.0)),
        (b"AU/CC", (0.0, 0.0)),
        (b"AU/CG", (0.0, 0.0)),
        (b"AU/CU", (0.0, 0.0)),
        (b"AU/GA", (0.0, 0.0)),
        (b"AU/GC", (0.0, 0.0)),
        (b"AU/GG", (0.0, 0.0)),
        (b"AU/GU", (0.0, 0.0)),
        (b"AU/UC", (0.0, 0.0)),
        (b"AU/UG", (-8.8, -23.9)),
        (b"AU/UU", (0.0, 0.0)),
        (b"CA/AA", (0.0, 0.0)),
        (b"CA/AC", (0.0, 0.0)),
        (b"CA/AG", (0.0, 0.0)),
        (b"CA/AU", (0.0, 0.0)),
        (b"CA/CA", (0.0, 0.0)),
        (b"CA/CC", (0.0, 0.0)),
        (b"CA/CG", (0.0, 0.0)),
        (b"CA/CU", (0.0, 0.0)),
        (b"CA/GA", (0.0, 0.0)),
        (b"CA/GC", (0.0, 0.0)),
        (b"CA/GG", (0.0, 0.0)),
        (b"CA/UA", (0.0, 0.0)),
        (b"CA/UC", (0.0, 0.0)),
        (b"CA/UG", (0.0, 0.0)),
        (b"CA/UU", (0.0, 0.0)),
        (b"CC/AA", (0.0, 0.0)),
        (b"CC/AC", (0.0, 0.0)),
        (b"CC/AG", (0.0, 0.0)),
        (b"CC/AU", (0.0, 0.0)),
        (b"CC/CA", (0.0, 0.0)),
        (b"CC/CC", (0.0, 0.0)),
        (b"CC/CG", (0.0, 0.0)),
        (b"CC/CU", (0.0, 0.0)),
        (b"CC/GA", (0.0, 0.0)),
        (b"CC/GC", (0.0, 0.0)),
        (b"CC/GU", (0.0, 0.0)),
        (b"CC/UA", (0.0, 0.0)),
        (b"CC/UC", (0.0, 0.0)),
        (b"CC/UG", (0.0, 0.0)),
        (b"CC/UU", (0.0, 0.0)),
        (b"CG/AA", (0.0, 0.0)),
        (b"CG/AC", (0.0, 0.0)),
        (b"CG/AG", (0.0, 0.0)),
        (b"CG/AU", (0.0, 0.0)),
        (b"CG/CA", (0.0, 0.0)),
        (b"CG/CC", (0.0, 0.0)),
        (b"CG/CG", (0.0, 0.0)),
        (b"CG/CU", (0.0, 0.0)),
        (b"CG/GA", (0.0, 0.0)),
        (b"CG/GG", (0.0, 0.0)),
        (b"CG/GU", (-5.6, -13.5)),
        (b"CG/UA", (0.0, 0.0)),
        (b"CG/UC", (0.0, 0.0)),
        (b"CG/UG", (0.0, 0.0)),
        (b"CG/UU", (0.0, 0.0)),
        (b"CU/AA", (0.0, 0.0)),
        (b"CU/AC", (0.0, 0.0)),
        (b"CU/AG", (0.0, 0.0)),
        (b"CU/AU", (0.0, 0.0)),
        (b"CU/CA", (0.0, 0.0)),
        (b"CU/CC", (0.0, 0.0)),
        (b"CU/CG", (0.0, 0.0)),
        (b"CU/CU", (0.0, 0.0)),
        (b"CU/GC", (0.0, 0.0)),
        (b"CU/GG", (-12.1, -32.2)),
        (b"CU/GU", (0.0, 0.0)),
        (b"CU/UA", (0.0, 0.0)),
        (b"CU/UC", (0.0, 0.0)),
        (b"CU/UG", (0.0, 0.0)),
        (b"CU/UU", (0.0, 0.0)),
        (b"GA/AA", (0.0, 0.0)),
        (b"GA/AC", (0.0, 0.0)),
        (b"GA/AG", (0.0, 0.0)),
        (b"GA/AU", (0.0, 0.0)),
        (b"GA/CA", (0.0, 0.0)),
        (b"GA/CC", (0.0, 0.0)),
        (b"GA/CG", (0.0, 0.0)),
        (b"GA/GA", (0.0, 0.0)),
        (b"GA/GC", (0.0, 0.0)),
        (b"GA/GG", (0.0, 0.0)),
        (b"GA/GU", (0.0, 0.0)),
        (b"GA/UA", (0.0, 0.0)),
        (b"GA/UC", (0.0, 0.0)),
        (b"GA/UG", (0.0, 0.0)),
        (b"GA/UU", (-12.8, -37.1)),
        (b"GC/AA", (0.0, 0.0)),
        (b"GC/AC", (0.0, 0.0)),
        (b"GC/AG", (0.0, 0.0)),
        (b"GC/AU", (0.0, 0.0)),
        (b"GC/CA", (0.0, 0.0)),
        (b"GC/CC", (0.0, 0.0)),
        (b"GC/CU", (0.0, 0.0)),
        (b"GC/GA", (0.0, 0.0)),
        (b"GC/GC", (0.0, 0.0)),
        (b"GC/GG", (0.0, 0.0)),
        (b"GC/GU", (0.0, 0.0)),
        (b"GC/UA", (0.0, 0.0)),
        (b"GC/UC", (0.0, 0.0)),
        (b"GC/UG", (-12.6, -32.6)),
        (b"GC/UU", (0.0, 0.0)),
        (b"GG/AA", (0.0, 0.0)),
        (b"GG/AC", (0.0, 0.0)),
        (b"GG/AG", (0.0, 0.0)),
        (b"GG/AU", (0.0, 0.0)),
        (b"GG/CA", (0.0, 0.0)),
        (b"GG/CG", (0.0, 0.0)),
        (b"GG/CU", (-8.3, -21.9)),
        (b"GG/GA", (0.0, 0.0)),
        (b"GG/GC", (0.0, 0.0)),
        (b"GG/GG", (0.0, 0.0)),
        (b"GG/GU", (0.0, 0.0)),
        (b"GG/UA", (0.0, 0.0)),
        (b"GG/UC", (-12.1, -32.2)),
        (b"GG/UG", (0.0, 0.0)),
        (b"GG/UU", (-13.5, -41.9)),
        (b"GU/AA", (0.0, 0.0)),
        (b"GU/AC", (0.0, 0.0)),
        (b"GU/AG", (0.0, 0.0)),
        (b"GU/AU", (0.0, 0.0)),
        (b"GU/CC", (0.0, 0.0)),
        (b"GU/CG", (-12.6, -32.6)),
        (b"GU/CU", (0.0, 0.0)),
        (b"GU/GA", (0.0, 0.0)),
        (b"GU/GC", (0.0, 0.0)),
        (b"GU/GG", (0.0, 0.0)),
        (b"GU/GU", (0.0, 0.0)),
        (b"GU/UA", (-8.8, -23.9)),
        (b"GU/UC", (0.0, 0.0)),
        (b"GU/UG", (-14.6, -51.3)),
        (b"GU/UU", (0.0, 0.0)),
        (b"UA/AA", (0.0, 0.0)),
        (b"UA/AC", (0.0, 0.0)),
        (b"UA/AG", (0.0, 0.0)),
        (b"UA/CA", (0.0, 0.0)),
        (b"UA/CC", (0.0, 0.0)),
        (b"UA/CG", (0.0, 0.0)),
        (b"UA/CU", (0.0, 0.0)),
        (b"UA/GA", (0.0, 0.0)),
        (b"UA/GC", (0.0, 0.0)),
        (b"UA/GG", (0.0, 0.0)),
        (b"UA/GU", (-7.0, -19.3)),
        (b"UA/UA", (0.0, 0.0)),
        (b"UA/UC", (0.0, 0.0)),
        (b"UA/UG", (0.0, 0.0)),
        (b"UA/UU", (0.0, 0.0)),
        (b"UC/AA", (0.0, 0.0)),
        (b"UC/AC", (0.0, 0.0)),
        (b"UC/AU", (0.0, 0.0)),
        (b"UC/CA", (0.0, 0.0)),
        (b"UC/CC", (0.0, 0.0)),
        (b"UC/CG", (0.0, 0.0)),
        (b"UC/CU", (0.0, 0.0)),
        (b"UC/GA", (0.0, 0.0)),
        (b"UC/GC", (0.0, 0.0)),
        (b"UC/GG", (-8.3, -21.9)),
        (b"UC/GU", (0.0, 0.0)),
        (b"UC/UA", (0.0, 0.0)),
        (b"UC/UC", (0.0, 0.0)),
        (b"UC/UG", (0.0, 0.0)),
        (b"UC/UU", (0.0, 0.0)),
        (b"UG/AA", (0.0, 0.0)),
        (b"UG/AG", (0.0, 0.0)),
        (b"UG/AU", (-7.0, -19.3)),
        (b"UG/CA", (0.0, 0.0)),
        (b"UG/CC", (0.0, 0.0)),
        (b"UG/CG", (0.0, 0.0)),
        (b"UG/CU", (0.0, 0.0)),
        (b"UG/GA", (0.0, 0.0)),
        (b"UG/GC", (-5.6, -13.5)),
        (b"UG/GG", (0.0, 0.0)),
        (b"UG/GU", (-9.3, -31.0)),
        (b"UG/UA", (0.0, 0.0)),
        (b"UG/UC", (0.0, 0.0)),
        (b"UG/UG", (0.0, 0.0)),
        (b"UG/UU", (0.0, 0.0)),
        (b"UU/AC", (0.0, 0.0)),
        (b"UU/AG", (-12.8, -37.1)),
        (b"UU/AU", (0.0, 0.0)),
        (b"UU/CA", (0.0, 0.0)),
        (b"UU/CC", (0.0, 0.0)),
        (b"UU/CG", (0.0, 0.0)),
        (b"UU/CU", (0.0, 0.0)),
        (b"UU/GA", (-3.2, -8.4)),
        (b"UU/GC", (0.0, 0.0)),
        (b"UU/GG", (-13.5, -41.9)),
        (b"UU/GU", (0.0, 0.0)),
        (b"UU/UA", (0.0, 0.0)),
        (b"UU/UC", (0.0, 0.0)),
        (b"UU/UG", (0.0, 0.0)),
        (b"UU/UU", (0.0, 0.0)),
    ];

    let mut internal_mm = BpEnergy::default();
    for (s, v) in RAW_INTERNAL_MM {
        internal_mm.insert(s.to_owned(), v);
        let srev = s.iter().copied().rev().collect();
        if !internal_mm.contains_key(&srev) {
            internal_mm.insert(srev, v);
        }
    }
    internal_mm
}

pub fn terminal_mm() -> BpEnergy {
    pub static RAW_TERMINAL_MM: [(&[u8], (f64, f64)); 256] = [
        (b"AA/AA", (0.0, 0.0)),
        (b"AA/AC", (0.0, 0.0)),
        (b"AA/AG", (0.0, 0.0)),
        (b"AA/AU", (0.0, 0.0)),
        (b"AA/CA", (0.0, 0.0)),
        (b"AA/CC", (0.0, 0.0)),
        (b"AA/CG", (0.0, 0.0)),
        (b"AA/CU", (0.0, 0.0)),
        (b"AA/GA", (0.0, 0.0)),
        (b"AA/GC", (0.0, 0.0)),
        (b"AA/GG", (0.0, 0.0)),
        (b"AA/GU", (0.0, 0.0)),
        (b"AA/UA", (-3.9, -10.0)),
        (b"AA/UC", (2.0, 9.7)),
        (b"AA/UG", (-3.5, -8.7)),
        (b"AA/UU", (2.0, 9.7)),
        (b"AC/AA", (0.0, 0.0)),
        (b"AC/AC", (0.0, 0.0)),
        (b"AC/AG", (0.0, 0.0)),
        (b"AC/AU", (0.0, 0.0)),
        (b"AC/CA", (0.0, 0.0)),
        (b"AC/CC", (0.0, 0.0)),
        (b"AC/CG", (0.0, 0.0)),
        (b"AC/CU", (0.0, 0.0)),
        (b"AC/GA", (0.0, 0.0)),
        (b"AC/GC", (0.0, 0.0)),
        (b"AC/GG", (0.0, 0.0)),
        (b"AC/GU", (0.0, 0.0)),
        (b"AC/UA", (-2.3, -5.5)),
        (b"AC/UC", (6.0, 21.6)),
        (b"AC/UG", (-2.3, -5.5)),
        (b"AC/UU", (-0.3, 1.3)),
        (b"AG/AA", (0.0, 0.0)),
        (b"AG/AC", (0.0, 0.0)),
        (b"AG/AG", (0.0, 0.0)),
        (b"AG/AU", (0.0, 0.0)),
        (b"AG/CA", (0.0, 0.0)),
        (b"AG/CC", (0.0, 0.0)),
        (b"AG/CG", (0.0, 0.0)),
        (b"AG/CU", (0.0, 0.0)),
        (b"AG/GA", (0.0, 0.0)),
        (b"AG/GC", (0.0, 0.0)),
        (b"AG/GG", (0.0, 0.0)),
        (b"AG/GU", (0.0, 0.0)),
        (b"AG/UA", (-3.1, -7.4)),
        (b"AG/UC", (2.0, 9.7)),
        (b"AG/UG", (-3.5, -8.7)),
        (b"AG/UU", (2.0, 9.7)),
        (b"AU/AA", (0.0, 0.0)),
        (b"AU/AC", (0.0, 0.0)),
        (b"AU/AG", (0.0, 0.0)),
        (b"AU/AU", (0.0, 0.0)),
        (b"AU/CA", (0.0, 0.0)),
        (b"AU/CC", (0.0, 0.0)),
        (b"AU/CG", (0.0, 0.0)),
        (b"AU/CU", (0.0, 0.0)),
        (b"AU/GA", (0.0, 0.0)),
        (b"AU/GC", (0.0, 0.0)),
        (b"AU/GG", (0.0, 0.0)),
        (b"AU/GU", (0.0, 0.0)),
        (b"AU/UA", (-2.3, -5.5)),
        (b"AU/UC", (4.6, 17.4)),
        (b"AU/UG", (-2.3, -5.5)),
        (b"AU/UU", (-1.7, -2.9)),
        (b"CA/AA", (0.0, 0.0)),
        (b"CA/AC", (0.0, 0.0)),
        (b"CA/AG", (0.0, 0.0)),
        (b"CA/AU", (0.0, 0.0)),
        (b"CA/CA", (0.0, 0.0)),
        (b"CA/CC", (0.0, 0.0)),
        (b"CA/CG", (0.0, 0.0)),
        (b"CA/CU", (0.0, 0.0)),
        (b"CA/GA", (-9.1, -24.5)),
        (b"CA/GC", (-5.6, -13.2)),
        (b"CA/GG", (-5.6, -13.5)),
        (b"CA/GU", (-5.6, -13.2)),
        (b"CA/UA", (0.0, 0.0)),
        (b"CA/UC", (0.0, 0.0)),
        (b"CA/UG", (0.0, 0.0)),
        (b"CA/UU", (0.0, 0.0)),
        (b"CC/AA", (0.0, 0.0)),
        (b"CC/AC", (0.0, 0.0)),
        (b"CC/AG", (0.0, 0.0)),
        (b"CC/AU", (0.0, 0.0)),
        (b"CC/CA", (0.0, 0.0)),
        (b"CC/CC", (0.0, 0.0)),
        (b"CC/CG", (0.0, 0.0)),
        (b"CC/CU", (0.0, 0.0)),
        (b"CC/GA", (-5.7, -15.2)),
        (b"CC/GC", (-3.4, -7.4)),
        (b"CC/GG", (-5.7, -15.2)),
        (b"CC/GU", (-2.7, -6.1)),
        (b"CC/UA", (0.0, 0.0)),
        (b"CC/UC", (0.0, 0.0)),
        (b"CC/UG", (0.0, 0.0)),
        (b"CC/UU", (0.0, 0.0)),
        (b"CG/AA", (0.0, 0.0)),
        (b"CG/AC", (0.0, 0.0)),
        (b"CG/AG", (0.0, 0.0)),
        (b"CG/AU", (0.0, 0.0)),
        (b"CG/CA", (0.0, 0.0)),
        (b"CG/CC", (0.0, 0.0)),
        (b"CG/CG", (0.0, 0.0)),
        (b"CG/CU", (0.0, 0.0)),
        (b"CG/GA", (-8.2, -21.9)),
        (b"CG/GC", (-5.6, -13.2)),
        (b"CG/GG", (-9.2, -24.5)),
        (b"CG/GU", (-5.6, -13.2)),
        (b"CG/UA", (0.0, 0.0)),
        (b"CG/UC", (0.0, 0.0)),
        (b"CG/UG", (0.0, 0.0)),
        (b"CG/UU", (0.0, 0.0)),
        (b"CU/AA", (0.0, 0.0)),
        (b"CU/AC", (0.0, 0.0)),
        (b"CU/AG", (0.0, 0.0)),
        (b"CU/AU", (0.0, 0.0)),
        (b"CU/CA", (0.0, 0.0)),
        (b"CU/CC", (0.0, 0.0)),
        (b"CU/CG", (0.0, 0.0)),
        (b"CU/CU", (0.0, 0.0)),
        (b"CU/GA", (-5.7, -15.2)),
        (b"CU/GC", (-5.3, -12.6)),
        (b"CU/GG", (-5.7, -15.2)),
        (b"CU/GU", (-8.6, -23.9)),
        (b"CU/UA", (0.0, 0.0)),
        (b"CU/UC", (0.0, 0.0)),
        (b"CU/UG", (0.0, 0.0)),
        (b"CU/UU", (0.0, 0.0)),
        (b"GA/AA", (0.0, 0.0)),
        (b"GA/AC", (0.0, 0.0)),
        (b"GA/AG", (0.0, 0.0)),
        (b"GA/AU", (0.0, 0.0)),
        (b"GA/CA", (-5.2, -13.2)),
        (b"GA/CC", (-4.0, -8.1)),
        (b"GA/CG", (-5.6, -13.9)),
        (b"GA/CU", (-4.0, -8.1)),
        (b"GA/GA", (0.0, 0.0)),
        (b"GA/GC", (0.0, 0.0)),
        (b"GA/GG", (0.0, 0.0)),
        (b"GA/GU", (0.0, 0.0)),
        (b"GA/UA", (-3.4, -10.0)),
        (b"GA/UC", (2.0, 9.7)),
        (b"GA/UG", (-3.5, -8.7)),
        (b"GA/UU", (2.0, 9.7)),
        (b"GC/AA", (0.0, 0.0)),
        (b"GC/AC", (0.0, 0.0)),
        (b"GC/AG", (0.0, 0.0)),
        (b"GC/AU", (0.0, 0.0)),
        (b"GC/CA", (-7.2, -19.7)),
        (b"GC/CC", (0.5, 3.9)),
        (b"GC/CG", (-7.2, -19.7)),
        (b"GC/CU", (-4.2, -11.9)),
        (b"GC/GA", (0.0, 0.0)),
        (b"GC/GC", (0.0, 0.0)),
        (b"GC/GG", (0.0, 0.0)),
        (b"GC/GU", (0.0, 0.0)),
        (b"GC/UA", (-2.3, -5.5)),
        (b"GC/UC", (6.0, 21.6)),
        (b"GC/UG", (-2.3, -5.5)),
        (b"GC/UU", (-0.3, 1.3)),
        (b"GG/AA", (0.0, 0.0)),
        (b"GG/AC", (0.0, 0.0)),
        (b"GG/AG", (0.0, 0.0)),
        (b"GG/AU", (0.0, 0.0)),
        (b"GG/CA", (-7.1, -17.7)),
        (b"GG/CC", (-4.0, -8.1)),
        (b"GG/CG", (-6.2, -15.5)),
        (b"GG/CU", (-4.0, -8.1)),
        (b"GG/GA", (0.0, 0.0)),
        (b"GG/GC", (0.0, 0.0)),
        (b"GG/GG", (0.0, 0.0)),
        (b"GG/GU", (0.0, 0.0)),
        (b"GG/UA", (-0.6, 0.0)),
        (b"GG/UC", (2.0, 9.7)),
        (b"GG/UG", (-3.5, -8.7)),
        (b"GG/UU", (2.0, 9.7)),
        (b"GU/AA", (0.0, 0.0)),
        (b"GU/AC", (0.0, 0.0)),
        (b"GU/AG", (0.0, 0.0)),
        (b"GU/AU", (0.0, 0.0)),
        (b"GU/CA", (-7.2, -19.7)),
        (b"GU/CC", (-0.3, 2.3)),
        (b"GU/CG", (-7.2, -19.7)),
        (b"GU/CU", (-5.0, -13.9)),
        (b"GU/GA", (0.0, 0.0)),
        (b"GU/GC", (0.0, 0.0)),
        (b"GU/GG", (0.0, 0.0)),
        (b"GU/GU", (0.0, 0.0)),
        (b"GU/UA", (-2.3, -5.5)),
        (b"GU/UC", (4.6, 17.4)),
        (b"GU/UG", (-2.3, -5.5)),
        (b"GU/UU", (1.6, 7.1)),
        (b"UA/AA", (-4.0, -9.7)),
        (b"UA/AC", (-6.3, -17.7)),
        (b"UA/AG", (-8.9, -25.1)),
        (b"UA/AU", (-6.3, -17.7)),
        (b"UA/CA", (0.0, 0.0)),
        (b"UA/CC", (0.0, 0.0)),
        (b"UA/CG", (0.0, 0.0)),
        (b"UA/CU", (0.0, 0.0)),
        (b"UA/GA", (-4.8, -12.3)),
        (b"UA/GC", (-6.3, -17.7)),
        (b"UA/GG", (-8.9, -25.1)),
        (b"UA/GU", (-6.3, -17.7)),
        (b"UA/UA", (0.0, 0.0)),
        (b"UA/UC", (0.0, 0.0)),
        (b"UA/UG", (0.0, 0.0)),
        (b"UA/UU", (0.0, 0.0)),
        (b"UC/AA", (-4.3, -11.6)),
        (b"UC/AC", (-5.1, -14.5)),
        (b"UC/AG", (-4.3, -11.6)),
        (b"UC/AU", (-1.8, -4.2)),
        (b"UC/CA", (0.0, 0.0)),
        (b"UC/CC", (0.0, 0.0)),
        (b"UC/CG", (0.0, 0.0)),
        (b"UC/CU", (0.0, 0.0)),
        (b"UC/GA", (-4.3, -11.6)),
        (b"UC/GC", (-5.1, -14.5)),
        (b"UC/GG", (-4.3, -11.6)),
        (b"UC/GU", (-1.8, -4.2)),
        (b"UC/UA", (0.0, 0.0)),
        (b"UC/UC", (0.0, 0.0)),
        (b"UC/UG", (0.0, 0.0)),
        (b"UC/UU", (0.0, 0.0)),
        (b"UG/AA", (-3.8, -8.7)),
        (b"UG/AC", (-6.3, -17.7)),
        (b"UG/AG", (-8.9, -24.8)),
        (b"UG/AU", (-6.3, -17.7)),
        (b"UG/CA", (0.0, 0.0)),
        (b"UG/CC", (0.0, 0.0)),
        (b"UG/CG", (0.0, 0.0)),
        (b"UG/CU", (0.0, 0.0)),
        (b"UG/GA", (3.1, 11.6)),
        (b"UG/GC", (-6.3, -17.7)),
        (b"UG/GG", (-1.5, -2.3)),
        (b"UG/GU", (-6.3, -17.7)),
        (b"UG/UA", (0.0, 0.0)),
        (b"UG/UC", (0.0, 0.0)),
        (b"UG/UG", (0.0, 0.0)),
        (b"UG/UU", (0.0, 0.0)),
        (b"UU/AA", (-4.3, -11.6)),
        (b"UU/AC", (-1.4, -2.6)),
        (b"UU/AG", (-4.3, -11.6)),
        (b"UU/AU", (1.4, 6.1)),
        (b"UU/CA", (0.0, 0.0)),
        (b"UU/CC", (0.0, 0.0)),
        (b"UU/CG", (0.0, 0.0)),
        (b"UU/CU", (0.0, 0.0)),
        (b"UU/GA", (-4.3, -11.6)),
        (b"UU/GC", (-1.4, -2.6)),
        (b"UU/GG", (-4.3, -11.6)),
        (b"UU/GU", (1.4, 6.1)),
        (b"UU/UA", (0.0, 0.0)),
        (b"UU/UC", (0.0, 0.0)),
        (b"UU/UG", (0.0, 0.0)),
        (b"UU/UU", (0.0, 0.0)),
    ];

    let mut terminal_mm = BpEnergy::default();
    for (s, v) in RAW_TERMINAL_MM {
        terminal_mm.insert(s.to_owned(), v);
        let srev = s.iter().copied().rev().collect();
        if !terminal_mm.contains_key(&srev) {
            terminal_mm.insert(srev, v);
        }
    }
    terminal_mm
}

pub fn de() -> BpEnergy {
    pub static RAW_DE: [(&[u8], (f64, f64)); 128] = [
        (b"AA/A.", (0.0, 0.0)),
        (b"AC/A.", (0.0, 0.0)),
        (b"AG/A.", (0.0, 0.0)),
        (b"AU/A.", (0.0, 0.0)),
        (b"AA/C.", (0.0, 0.0)),
        (b"AC/C.", (0.0, 0.0)),
        (b"AG/C.", (0.0, 0.0)),
        (b"AU/C.", (0.0, 0.0)),
        (b"AA/G.", (0.0, 0.0)),
        (b"AC/G.", (0.0, 0.0)),
        (b"AG/G.", (0.0, 0.0)),
        (b"AU/G.", (0.0, 0.0)),
        (b"AA/U.", (-4.9, -13.2)),
        (b"AC/U.", (-0.9, -1.3)),
        (b"AG/U.", (-5.5, -15.2)),
        (b"AU/U.", (-2.3, -5.5)),
        (b"CA/A.", (0.0, 0.0)),
        (b"CC/A.", (0.0, 0.0)),
        (b"CG/A.", (0.0, 0.0)),
        (b"CU/A.", (0.0, 0.0)),
        (b"CA/C.", (0.0, 0.0)),
        (b"CC/C.", (0.0, 0.0)),
        (b"CG/C.", (0.0, 0.0)),
        (b"CU/C.", (0.0, 0.0)),
        (b"CA/G.", (-9.0, -23.5)),
        (b"CC/G.", (-4.1, -10.6)),
        (b"CG/G.", (-8.6, -22.2)),
        (b"CU/G.", (-7.5, -20.3)),
        (b"CA/U.", (0.0, 0.0)),
        (b"CC/U.", (0.0, 0.0)),
        (b"CG/U.", (0.0, 0.0)),
        (b"CU/U.", (0.0, 0.0)),
        (b"GA/A.", (0.0, 0.0)),
        (b"GC/A.", (0.0, 0.0)),
        (b"GG/A.", (0.0, 0.0)),
        (b"GU/A.", (0.0, 0.0)),
        (b"GA/C.", (-7.4, -20.3)),
        (b"GC/C.", (-2.8, -7.7)),
        (b"GG/C.", (-6.4, -16.4)),
        (b"GU/C.", (-3.6, -9.7)),
        (b"GA/G.", (0.0, 0.0)),
        (b"GC/G.", (0.0, 0.0)),
        (b"GG/G.", (0.0, 0.0)),
        (b"GU/G.", (0.0, 0.0)),
        (b"GA/U.", (-4.9, -13.2)),
        (b"GC/U.", (-0.9, -1.3)),
        (b"GG/U.", (-5.5, -15.2)),
        (b"GU/U.", (-2.3, -5.5)),
        (b"UA/A.", (-5.7, -16.1)),
        (b"UC/A.", (-0.7, -1.9)),
        (b"UG/A.", (-5.8, -16.4)),
        (b"UU/A.", (-2.2, -6.8)),
        (b"UA/C.", (0.0, 0.0)),
        (b"UC/C.", (0.0, 0.0)),
        (b"UG/C.", (0.0, 0.0)),
        (b"UU/C.", (0.0, 0.0)),
        (b"UA/G.", (-5.7, -16.1)),
        (b"UC/G.", (-0.7, -1.9)),
        (b"UG/G.", (-5.8, -16.4)),
        (b"UU/G.", (-2.2, -6.8)),
        (b"UA/U.", (0.0, 0.0)),
        (b"UC/U.", (0.0, 0.0)),
        (b"UG/U.", (0.0, 0.0)),
        (b"UU/U.", (0.0, 0.0)),
        (b"A./AA", (0.0, 0.0)),
        (b"A./AC", (0.0, 0.0)),
        (b"A./AG", (0.0, 0.0)),
        (b"A./AU", (0.0, 0.0)),
        (b"A./CA", (0.0, 0.0)),
        (b"A./CC", (0.0, 0.0)),
        (b"A./CG", (0.0, 0.0)),
        (b"A./CU", (0.0, 0.0)),
        (b"A./GA", (0.0, 0.0)),
        (b"A./GC", (0.0, 0.0)),
        (b"A./GG", (0.0, 0.0)),
        (b"A./GU", (0.0, 0.0)),
        (b"A./UA", (-0.5, -0.6)),
        (b"A./UC", (6.9, 22.6)),
        (b"A./UG", (0.6, 2.6)),
        (b"A./UU", (0.6, 2.6)),
        (b"C./AA", (0.0, 0.0)),
        (b"C./AC", (0.0, 0.0)),
        (b"C./AG", (0.0, 0.0)),
        (b"C./AU", (0.0, 0.0)),
        (b"C./CA", (0.0, 0.0)),
        (b"C./CC", (0.0, 0.0)),
        (b"C./CG", (0.0, 0.0)),
        (b"C./CU", (0.0, 0.0)),
        (b"C./GA", (-1.6, -4.5)),
        (b"C./GC", (0.7, 3.2)),
        (b"C./GG", (-4.6, -14.8)),
        (b"C./GU", (-0.4, -1.3)),
        (b"C./UA", (0.0, 0.0)),
        (b"C./UC", (0.0, 0.0)),
        (b"C./UG", (0.0, 0.0)),
        (b"C./UU", (0.0, 0.0)),
        (b"G./AA", (0.0, 0.0)),
        (b"G./AC", (0.0, 0.0)),
        (b"G./AG", (0.0, 0.0)),
        (b"G./AU", (0.0, 0.0)),
        (b"G./CA", (-2.4, -6.1)),
        (b"G./CC", (3.3, 11.6)),
        (b"G./CG", (0.8, 3.2)),
        (b"G./CU", (-1.4, -4.2)),
        (b"G./GA", (0.0, 0.0)),
        (b"G./GC", (0.0, 0.0)),
        (b"G./GG", (0.0, 0.0)),
        (b"G./GU", (0.0, 0.0)),
        (b"G./UA", (-0.5, -0.6)),
        (b"G./UC", (6.9, 22.6)),
        (b"G./UG", (0.6, 2.6)),
        (b"G./UU", (0.6, 2.6)),
        (b"U./AA", (1.6, 6.1)),
        (b"U./AC", (2.2, 8.1)),
        (b"U./AG", (0.7, 3.5)),
        (b"U./AU", (3.1, 10.6)),
        (b"U./CA", (0.0, 0.0)),
        (b"U./CC", (0.0, 0.0)),
        (b"U./CG", (0.0, 0.0)),
        (b"U./CU", (0.0, 0.0)),
        (b"U./GA", (1.6, 6.1)),
        (b"U./GC", (2.2, 8.1)),
        (b"U./GG", (0.7, 3.5)),
        (b"U./GU", (3.1, 10.6)),
        (b"U./UA", (0.0, 0.0)),
        (b"U./UC", (0.0, 0.0)),
        (b"U./UG", (0.0, 0.0)),
        (b"U./UU", (0.0, 0.0)),
    ];

    let mut de = BpEnergy::default();
    for (s, v) in RAW_DE {
        de.insert(s.to_owned(), v);
        let srev = s.iter().copied().rev().collect();
        if !de.contains_key(&srev) {
            de.insert(srev, v);
        }
    }
    de
}

pub fn internal_loops() -> LoopEnergy {
    pub static RAW_INTERNAL_LOOPS: [(usize, (f64, f64)); 30] = [
        (1, (0.0, 0.0)),
        (2, (0.0, 0.0)),
        (3, (0.0, 0.0)),
        (4, (-7.2, -26.8)),
        (5, (-6.8, -28.4)),
        (6, (-1.3, -10.6)),
        (7, (-1.3, -11.0)),
        (8, (-1.3, -11.6)),
        (9, (-1.3, -11.9)),
        (10, (-1.3, -12.3)),
        (11, (-1.3, -12.6)),
        (12, (-1.3, -12.9)),
        (13, (-1.3, -13.2)),
        (14, (-1.3, -13.5)),
        (15, (-1.3, -13.5)),
        (16, (-1.3, -13.9)),
        (17, (-1.3, -14.2)),
        (18, (-1.3, -14.2)),
        (19, (-1.3, -14.5)),
        (20, (-1.3, -14.8)),
        (21, (-1.3, -14.8)),
        (22, (-1.3, -15.2)),
        (23, (-1.3, -15.2)),
        (24, (-1.3, -15.5)),
        (25, (-1.3, -15.5)),
        (26, (-1.3, -15.5)),
        (27, (-1.3, -15.8)),
        (28, (-1.3, -15.8)),
        (29, (-1.3, -16.1)),
        (30, (-1.3, -16.1)),
    ];

    LoopEnergy::from_iter(RAW_INTERNAL_LOOPS)
}

pub fn bulge_loops() -> LoopEnergy {
    pub static RAW_BULGE_LOOPS: [(usize, (f64, f64)); 30] = [
        (1, (10.6, 21.9)),
        (2, (7.1, 13.9)),
        (3, (7.1, 12.6)),
        (4, (7.1, 11.3)),
        (5, (7.1, 10.0)),
        (6, (7.1, 8.7)),
        (7, (7.1, 8.1)),
        (8, (7.1, 7.7)),
        (9, (7.1, 7.4)),
        (10, (7.1, 7.1)),
        (11, (7.1, 6.8)),
        (12, (7.1, 6.4)),
        (13, (7.1, 6.1)),
        (14, (7.1, 5.8)),
        (15, (7.1, 5.5)),
        (16, (7.1, 5.5)),
        (17, (7.1, 5.2)),
        (18, (7.1, 5.2)),
        (19, (7.1, 4.8)),
        (20, (7.1, 4.5)),
        (21, (7.1, 4.5)),
        (22, (7.1, 4.2)),
        (23, (7.1, 4.2)),
        (24, (7.1, 4.2)),
        (25, (7.1, 3.9)),
        (26, (7.1, 3.9)),
        (27, (7.1, 3.5)),
        (28, (7.1, 3.5)),
        (29, (7.1, 3.5)),
        (30, (7.1, 3.2)),
    ];

    LoopEnergy::from_iter(RAW_BULGE_LOOPS)
}

fn raw_hairpin_loops() -> LoopEnergy {
    pub static RAW_HAIRPIN_LOOPS: [(usize, (f64, f64)); 30] = [
        (1, (0.0, 0.0)),
        (2, (0.0, 0.0)),
        (3, (1.3, -13.2)),
        (4, (4.8, -2.6)),
        (5, (3.6, -6.8)),
        (6, (-2.9, -26.8)),
        (7, (1.3, -15.2)),
        (8, (-2.9, -27.1)),
        (9, (5.0, -4.5)),
        (10, (5.0, -4.8)),
        (11, (5.0, -5.2)),
        (12, (5.0, -5.5)),
        (13, (5.0, -5.8)),
        (14, (5.0, -6.1)),
        (15, (5.0, -6.1)),
        (16, (5.0, -6.4)),
        (17, (5.0, -6.8)),
        (18, (5.0, -6.8)),
        (19, (5.0, -7.1)),
        (20, (5.0, -7.1)),
        (21, (5.0, -7.4)),
        (22, (5.0, -7.4)),
        (23, (5.0, -7.7)),
        (24, (5.0, -7.7)),
        (25, (5.0, -8.1)),
        (26, (5.0, -8.1)),
        (27, (5.0, -8.1)),
        (28, (5.0, -8.4)),
        (29, (5.0, -8.4)),
        (30, (5.0, -8.7)),
    ];

    LoopEnergy::from_iter(RAW_HAIRPIN_LOOPS)
}

pub fn calc_rna() -> Energies {
    Energies {
        bulge_loops: bulge_loops(),
        complement: complement(),
        de: de(),
        hairpin_loops: raw_hairpin_loops(),
        multibranch: multibranch(),
        internal_loops: internal_loops(),
        internal_mm: internal_mm(),
        nn: nn(),
        terminal_mm: terminal_mm(),
        tri_tetra_loops: None,
    }
}

pub fn rna() -> &'static Energies {
    pub static RNA: LazyLock<Energies> = LazyLock::new(|| calc_rna());
    &RNA
}
